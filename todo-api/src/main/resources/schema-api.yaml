openapi: "3.0.0"
info:
  title: TODO-API document
  version: "0.0.1"
  description: TODO-API document
tags:
  - name: opts
    description: 運用監視API
  - name: tasks
    description: タスク関連API
paths:
  /health:
    get:
      tags:
        - opts
      responses:
        '200':
          description: OK
  /tasks/:
    get:
      summary: "Get task list"
      description: "Get list of task items"
      operationId: getTaskList
      tags:
        - tasks
      parameters:
        - name: limit
          in: query
          required: true
          description: "Max number of task list in resource."
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          required: true
          description: "Paging offset"
          schema:
            type: integer
            # Task ID(Int64)と同じ大きさの整数が指定できるようにする
            format: int64
            minimum: 0
            default: 0
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskListDTO"
    post:
      summary: "Create new task"
      description: "Create new task item"
      operationId: createTask
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskForm"
      responses:
        '201':
          description: "Created"
          headers:
            location:
              description: "URI of created task"
              schema:
                type: string
          # contentはResponse bodyのスキーマ定義
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDTO"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
  /tasks/{taskId}:
    get:
      summary: "Get a task"
      description: "Get one task with specified ID"
      # operationId = TasksApi I/Fのメソッド名
      operationId: showTask
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: "Target task ID"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDTO"
        '404':
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundError"
components:
  schemas:
    TaskForm:
      type: object
      properties:
        title:
          type: string
          description: "Title of a task to create"
          maxLength: 256
          minLength: 1
      required:
        - title
    PageDTO:
      description: "Paging information"
      type: object
      properties:
        limit:
          description: "Requested limit"
          type: integer
          format: int32
        offset:
          description: "Requested offset"
          type: integer
          format: int64
        size:
          description: "Number of task items retrieved"
          type: integer
          format: int32
      required:
        - limit
        - offset
        - size
    TaskListDTO:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageDTO"
        results:
          type: array
          items:
            $ref: "#/components/schemas/TaskDTO"
      required:
        - results
    TaskDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Task ID"
        title:
          type: string
          description: "Task title"
      required:
        - id
        - title
    ResourceNotFoundError:
      description: "Specified resource does not exist"
      type: object
      properties:
        title:
          type: string
          description: "Error title"
          default: "Resource Not found"
        detail:
          type: string
          default: "Error details"
      required:
        - title
        - detail
    BadRequestError:
      description: "Request is invalid"
      type: object
      properties:
        title:
          type: string
          description: "Error title"
          default: "Bad Request"
        detail:
          type: string
          description: "Error details"
          default: "Request is invalid. Please retry to send correct request."
        invalid-params:
          type: array
          items:
            $ref: "#/components/schemas/InvalidParam"
      required:
        - title
        - detail
        - invalid-params
    InvalidParam:
      description: "Bad request details"
      type: object
      properties:
        name:
          type: string
          description: "Name of the field has error"
        reason:
          type: string
          description: "Error reason"
      required:
        - name
        - reason